function SplitStringToVariables {
<#

    .SYNOPSIS
    A simple function that can be used to hide a long (base64) string as several strings.
    That might also help bypassing some AMSI Checks while storing or transfering files.

    .DESCRIPTION
    InputString is split in chunks of random length.
    Length will be between fromNumber and toNumber.
    The total number of vars created depends on your length of InputString

    .PARAMETER InputString
    Your personal string (can be any kind of long string).
    This tool was built with only base64 in mind.

    .PARAMETER $outputFile
    The file that is created with the output
    Defaults to: "C:\Temp\SplitStringToVariables.txt"

    .EXAMPLE
    $DllBytes64 = "very long String In Base64"
    SplitStringToVariables -InputString $DllBytes64

    .NOTES
    $var = InputString

#>

    param (
        [Parameter(Mandatory=$true)]
        [string]$InputString,

        [Parameter(Mandatory=$false)]
        [int]$fromNumber = 222, # minimum string lenth

        [Parameter(Mandatory=$false)]
        [int]$toNumber = 555, # maximum string lenth

        [Parameter(Mandatory=$false)]
        [string]$outputFile = "C:\Temp\SplitStringToVariables.txt"

    )

    
    $stringLength = $InputString.Length

    # Initialize variables
    $parts = @()
    $startIndex = 0
    $random = New-Object System.Random

    # Split the string into parts with random lengths
    while ($startIndex -lt $stringLength) {
        $partLength = $random.Next($fromNumber, $toNumber)  # Random length between 22 and 57
        $endIndex = [math]::Min($startIndex + $partLength, $stringLength) - 1
        $parts += $InputString.Substring($startIndex, $endIndex - $startIndex + 1)
        $startIndex = $endIndex + 1
    }

    # Write the parts to a text file as variables
    Remove-Item -Path $outputFile -ErrorAction Ignore
    $index = 1
    $parts | ForEach-Object {
        $varLine = "`$var$index = `"$_`""
        Add-Content -Path $outputFile -Value $varLine
        $index++
    }

    # Write the final variable to concatenate all parts
    $concatVarLine = "`$var = `$var1"
    2..($index - 1) | ForEach-Object {
        $concatVarLine += " + `$var$_"
    }
    Add-Content -Path $outputFile -Value $concatVarLine
}
